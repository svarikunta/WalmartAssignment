package com.walmart.utility;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.wallmart.service.TicketingService;
import com.wallmart.service.TicketingServiceImpl;
import com.wallmat.model.Custmore;
import com.wallmat.model.FindAndHoldRequest;
import com.wallmat.model.FindAndHoldResponse;
import com.wallmat.model.FindAvailableResponse;
import com.wallmat.model.ReserveAndCommitRequest;
import com.wallmat.model.ReserveAndCommitResponse;
import com.wallmat.model.Seat;
import com.walmart.Constats.Constants;

public class TicketServiceUtility {

	public static void main(String Args[]) {

		TicketingService ts = new TicketingServiceImpl();

		Scanner input = new Scanner(System.in);

		System.out.println("Enter Custmore Name \n");
		String name = input.next();
		System.out.println("Enter Ph Number \n");
		String id = input.next();
		Custmore cust = new Custmore(name, id);

		int selection;

		do {

			System.out.println();
			System.out.println("1 - Disply seat Map");
			System.out.println("2 - Find Avilable, Held and Reserved seats");
			System.out.println("3 - Find and Hold Seats with cusmer preferd row and Reserve and Commit Held seats");
			System.out.println(
					"4 - Hold seats with custmore with custmore prefered row and column and Reserve and Commit Held seats");
			System.out.println(
					"5 - Find and Hold Seats with system preferd best avilable and Reserve and Commit Held seats");
			System.out.println("6 - Exit");

			selection = input.nextInt();

			FindAndHoldRequest findAndHoldRequest = new FindAndHoldRequest();
			FindAndHoldResponse findAndHoldResponse = null;
			ReserveAndCommitRequest reserveAndCommitRequest = new ReserveAndCommitRequest();
			ReserveAndCommitResponse reserveAndCommitResponse = null;

			switch (selection) {
			case 1:

				ts.displaySeatMap();
				break;

			case 2:

				FindAvailableResponse findAvailableResponse = ts.findNoOfSeatsAvilable();
				System.out.println("No of Available seats: " + findAvailableResponse.getTotalAvailableSeats());
				System.out.println("No of Held seats: " + findAvailableResponse.getTotalHeldSeats());
				System.out.println("No of Reserved seats: " + findAvailableResponse.getTotalReservedSeats());
				break;

			case 3:

				findAndHoldRequest.setCustmore(cust);
				System.out.println("Enter Prefered Row only Single Character betwen A  to " + Constants.ENDING_ROW);
				Character row = input.next().toUpperCase().charAt(0);
				
				while(!validateRow(row)){
					
					System.out.println("Weong input Enter Prefered Row only Single Character betwen A  to " + Constants.ENDING_ROW);
					row = input.next().toUpperCase().charAt(0);
				}
				
				findAndHoldRequest.setCustPreferedRow(row);
				System.out.println("Enter required number of seats");
				int reqNumbOfSeats = input.nextInt();
				findAndHoldRequest.setReqNumbOfSeats(reqNumbOfSeats);
				findAndHoldResponse = ts.findAndHoldSeats(findAndHoldRequest);
				if (findAndHoldResponse.getStatus().equals(FindAndHoldResponse.Status.NeedConfirm)) {

					System.out.println(findAndHoldResponse.getMesaage());
					Character userCh = input.next().toUpperCase().charAt(0);
					while (!userCh.equals('Y') && !userCh.equals('N')) {
						System.out.println(" Wrong Input Please enter Y or N");
						userCh = input.next().toUpperCase().charAt(0);
					}
					if (userCh.equals('Y')) {
						findAndHoldRequest.setUserConfirm(true);
						findAndHoldRequest.setCustPreferdSeats(findAndHoldResponse.getBestAvilableSeats());
						findAndHoldResponse = ts.findAndHoldSeats(findAndHoldRequest);

						if (findAndHoldResponse.getStatus().equals(FindAndHoldResponse.Status.Sucess)) {
							reserveAndCommitRequest.setCustmore(cust);
							reserveAndCommitRequest.setSeatsHeld(findAndHoldResponse.getSeatsHeld());
							reserveAndCommitResponse = ts.reserveAndCommitSeats(reserveAndCommitRequest);
							System.out.println(reserveAndCommitResponse.getMesaage());
						} else {

							System.out.println(findAndHoldResponse.getMesaage());
						}
					}

				} else if (findAndHoldResponse.getStatus().equals(FindAndHoldResponse.Status.Sucess)) {

					System.out.println(findAndHoldResponse.getMesaage());
					System.out.println("Enter Y to reserve N to ignore");
					Character userCh = input.next().toUpperCase().charAt(0);
					while (!userCh.equals('Y') && !userCh.equals('N')) {
						System.out.println(" Wrong Input Please enter Y or N");
						userCh = input.next().toUpperCase().charAt(0);
					}
					if (userCh.equals('Y')) {

						reserveAndCommitRequest.setCustmore(cust);
						reserveAndCommitRequest.setSeatsHeld(findAndHoldResponse.getSeatsHeld());
						reserveAndCommitResponse = ts.reserveAndCommitSeats(reserveAndCommitRequest);

						System.out.println(reserveAndCommitResponse.getMesaage());
					}

				} else {

					System.out.println(findAndHoldResponse.getMesaage());
				}

				break;
				
			case 4:

				System.out.println("Enter required number of seats");
				int reqNuOfSeats = input.nextInt();
				List<Seat> cutsPreferdSeats = new ArrayList<Seat>();
				
				for(int i=1;i<=reqNuOfSeats;i++){
					
					System.out.println("Enter Prefered Row only Single Character betwen A  to " + Constants.ENDING_ROW);
					Character r = input.next().toUpperCase().charAt(0);
					System.out.println("Enter Prefered cloumn only Single integer betwen 1 to " + Constants.NUMBER_ROWS);
					int c=input.nextInt();
					cutsPreferdSeats.add(new Seat(r,c));
					
				}
				findAndHoldRequest.setCustPreferdSeats(cutsPreferdSeats);
				findAndHoldResponse = ts.holdSeats(findAndHoldRequest);
				
				if (findAndHoldResponse.getStatus().equals(FindAndHoldResponse.Status.Sucess)) {

					System.out.println(findAndHoldResponse.getMesaage());
					System.out.println("Enter Y to reserve N to ignore");
					Character userCh = input.next().toUpperCase().charAt(0);
					while (!userCh.equals('Y') && !userCh.equals('N')) {
						System.out.println(" Wrong Input Please enter Y or N");
						userCh = input.next().toUpperCase().charAt(0);
					}
					if (userCh.equals('Y')) {

						reserveAndCommitRequest.setCustmore(cust);
						reserveAndCommitRequest.setSeatsHeld(findAndHoldResponse.getSeatsHeld());
						reserveAndCommitResponse = ts.reserveAndCommitSeats(reserveAndCommitRequest);

						System.out.println(reserveAndCommitResponse.getMesaage());
					}

				} else {

					System.out.println(findAndHoldResponse.getMesaage());
				}
								
				break;

			case 5:

				findAndHoldRequest.setCustmore(cust);

				System.out.println("Enter required number of seats");
				int reqNumOfSeats = input.nextInt();
				findAndHoldRequest.setReqNumbOfSeats(reqNumOfSeats);
				findAndHoldRequest.setCustPreferedRow(null);
				findAndHoldResponse = ts.findAndHoldSeats(findAndHoldRequest);

				if (findAndHoldResponse.getStatus().equals(FindAndHoldResponse.Status.Sucess)) {

					System.out.println(findAndHoldResponse.getMesaage());
					System.out.println("Enter Y to reserve N to ignore");
					Character userCh = input.next().toUpperCase().charAt(0);
					while (!userCh.equals('Y') && !userCh.equals('N')) {
						System.out.println(" Wrong Input Please enter Y or N");
						userCh = input.next().toUpperCase().charAt(0);
					}
					if (userCh.equals('Y')) {

						reserveAndCommitRequest.setCustmore(cust);
						reserveAndCommitRequest.setSeatsHeld(findAndHoldResponse.getSeatsHeld());
						reserveAndCommitResponse = ts.reserveAndCommitSeats(reserveAndCommitRequest);

						System.out.println(reserveAndCommitResponse.getMesaage());
					}

				} else {

					System.out.println(findAndHoldResponse.getMesaage());
				}

				break;

			}

		} while (selection < 5);

		input.close();

	}

	
	private static boolean validateRow(Character row){
		
		
		return ('A'>=row && row<=Constants.ENDING_ROW);
		
	}
	
	private static boolean validateColumn(int col){
		
		return (1>=col && col<=Constants.NUMBER_COLUMNS);
	}

	
	private boolean validatePhNumber(String ph){
		
		return (ph.matches("[1-9][0-9]{9}"));
		    
	}
}
