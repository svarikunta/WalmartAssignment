package com.wallmart.service;

import java.util.ArrayList;
import java.util.List;

import com.wallmat.model.Custmore;
import com.wallmat.model.ResorvationRequest;
import com.wallmat.model.ResorvationResponse;
import com.wallmat.model.Seat;
import com.wallmat.model.Stage;

public class TicketingServiceImplHelper {

	HoldTimer held = new HoldTimer();

	Stage stage = new Stage('G', 10);

	public ResorvationResponse findAvilableSeatAndHeld(ResorvationRequest request) {

		ResorvationResponse response = new ResorvationResponse();

		Character custPreferdRow = request.getCustPreferedRow();

		List<Seat> availableSeats = new ArrayList<Seat>();

		int reqNumbOfSeats = request.getReqNumbOfSeats();
		
		if(request.isUserConfirm()){
			
			response.setBestAvilableSeats(request.getBestAvilableSeats());
			holdAvilableSeats(response);
			return response;
		}

		if (null != custPreferdRow) {

			availableSeats.addAll(findAvailableSeatsInARow(custPreferdRow, reqNumbOfSeats));

			if (availableSeats.size() == reqNumbOfSeats) {
				
				response.setBestAvilableSeats(availableSeats);
				holdAvilableSeats(response);
				return response;
				

			} else {

				availableSeats
						.addAll(findAvailableSeatsInOtherRows(custPreferdRow, reqNumbOfSeats - availableSeats.size()));

				if (availableSeats.size() == reqNumbOfSeats) {

					response.setBestAvilableSeats(availableSeats);
					response.setSplitRow(true);
					response.setMesaage("Seats not avialbe in the same row");
					return response;
				}

				if (availableSeats.size() < reqNumbOfSeats) {

					response.setBestAvilableSeats(availableSeats);
					response.setSucess(false);
					response.setMesaage("Seats not avialbe in the same row");
					return response;
				}

			}

		} else {

			
			availableSeats.addAll(findAvailableSeatsInStage(reqNumbOfSeats));
			
			if (availableSeats.size() == reqNumbOfSeats) {

				response.setBestAvilableSeats(availableSeats);
				response.setMesaage("Seats not avialbe in the same row");
				holdAvilableSeats(response);
				return response;
			}

			if (availableSeats.size() < reqNumbOfSeats) {

				response.setBestAvilableSeats(availableSeats);
				response.setSucess(false);
				response.setMesaage("we have only :"+availableSeats.size());
				return response;
			}
		}

		return response;

	}

	public void holdAvilableSeats(ResorvationResponse response) {

		List<Seat> avilableSeats = response.getBestAvilableSeats();
		List<Seat> heldSeats = new ArrayList<Seat>();

		for (Seat seat : avilableSeats) {

			String key = seat.getRowNo().toString() + seat.getColNo();

			Seat st = stage.getSeatMap().get(key);

			if (st.getStatus().equals(Seat.Status.A)) {

				st.setAvilable(false);
				st.setStatus(Seat.Status.H);
				st.setCustmore(response.getCustmore());
				st.setHeld(true);
				heldSeats.add(st);
				Stage.seatsAvilable.getAndDecrement();
				Stage.seatsHeld.getAndIncrement();

			}

		}
         
		//response.setBestAvilableSeats(null);
		response.setSeatsHeld(heldSeats);
		
		held.updateHedStatus(heldSeats);

	}

	public ResorvationResponse resorveAndCommit(ResorvationRequest request) {
		
		List<Seat> heldSeats=request.getSeatsHeld();
		List<Seat> resorvedList = new ArrayList<Seat>();
		Custmore cust=request.getCustmore();
		ResorvationResponse response = new ResorvationResponse();
		response.setCustmore(request.getCustmore());

		for (Seat st : heldSeats) {

			String key = st.getRowNo().toString() + st.getColNo();

			st = stage.getSeatMap().get(key);

			if (st.isHeld()) {
				if (null != st.getCustmore() && st.getCustmore().getCustmoreId() == cust.getCustmoreId()) {

					st.setResorved(true);
					st.setHeld(false);
					Stage.seatsReserved.getAndIncrement();
					Stage.seatsHeld.getAndDecrement();
					resorvedList.add(st);
				} 

			} 
			
			st = stage.getSeatMap().put(key, st);
		}
		if(heldSeats.size()==resorvedList.size()){
			response.setSucess(true);
		}
		else{
			response.setSucess(false);
			response.setMesaage("Unable to resorve all the seats");
		
		}
		
		response.setSeatsResorved(resorvedList);
		return response;

	}

	public List<Seat> findAndHeldSeats(ResorvationRequest request) {

		List<Seat> heldSeats = new ArrayList<Seat>();

		for (Character row = 'A'; row <= stage.getNoOfRow(); row++) {
			for (int col = 1; col <= stage.getNoColums(); col++) {

				String key = row.toString() + col;
				Seat st = stage.getSeatMap().get(key);

				if (st.isAvilable()) {
					st.setHeld(true);
					st.setAvilable(false);
					Stage.seatsHeld.getAndIncrement();
					Stage.seatsAvilable.getAndDecrement();
					heldSeats.add(st);
					held.updateHedStatus(heldSeats);

				}

			}
		}

		return heldSeats;
	}

	public List<Seat> findAvailableSeatsInARow(Character preferedRow, int reqNumSeats) {
		int count=0;

		List<Seat> availableSeats = new ArrayList<Seat>();

		for (int i = 0; i < reqNumSeats; i++) {

			for (int col = 1; col <= stage.getNoColums(); col++) {

				String key = preferedRow.toString() + col;
				Seat st = stage.getSeatMap().get(key);

				if (st.isAvilable() && !contains(availableSeats, st)) {

					availableSeats.add(st);
					count++;
					if(count==reqNumSeats)
				    return availableSeats;
				}

			}

		}

		return availableSeats;
	}

	public List<Seat> findAvailableSeatsInOtherRows(Character preferedRow, int reqNumSeats) {
		int count=0;

		List<Seat> availableSeats = new ArrayList<Seat>();

		for (int i = 0; i < reqNumSeats; i++) {

			for (Character row = 'A'; row <= stage.getNoOfRow(); row++) {
				if (row != preferedRow) {
					for (int col = 1; col <= stage.getNoColums(); col++) {

						String key = row.toString() + col;
						Seat st = stage.getSeatMap().get(key);

						if (st.isAvilable() && !contains(availableSeats, st)) {

							availableSeats.add(st);
							count++;
							if(count==reqNumSeats)
						    return availableSeats;
						}

					}
				}

			}
		}

		return availableSeats;
	}

	public List<Seat> findAvailableSeatsInStage(int reqNumSeats) {
		int count=0;

		List<Seat> availableSeats = new ArrayList<Seat>();

		for (int i = 0; i < reqNumSeats; i++) {

			for (Character row = 'A'; row <= stage.getNoOfRow(); row++) {

				for (int col = 1; col <= stage.getNoColums(); col++) {

					String key = row.toString() + col;
					Seat st = stage.getSeatMap().get(key);

					if (st.isAvilable() && !contains(availableSeats, st)) {

						availableSeats.add(st);
						count++;
						if(count==reqNumSeats)
						return availableSeats;
						
					}

				}

			}
		}

		return availableSeats;
	}

	public boolean contains(List<Seat> availableSeats, Seat seat) {

		for (Seat st : availableSeats) {

			if (st.getRowNo().equals(seat.getRowNo()) && st.getColNo() == seat.getColNo()) {
				return true;
			}
		}

		return false;
	}
	
	public void displayStage(){
		
		for (int col = 1; col <= stage.getNoColums(); col++) {
		
			System.out.print("\t"+col);
			
		}
		
		System.out.println();
		
		for (Character row = 'A'; row <= stage.getNoOfRow(); row++) {
			
			System.out.print(row);
			
			for (int col = 1; col <= stage.getNoColums(); col++) {

				String key = row.toString() + col;
				Seat st = stage.getSeatMap().get(key);
				System.out.print("\t"+st.getStatus());

			}
			
			System.out.println();
		

		}
		
		
		System.out.println("A - Available : "+Stage.seatsAvilable);
		System.out.println("H - Hold : "+Stage.seatsHeld);
		System.out.println("A - Reserved : "+Stage.seatsReserved);
	}

}
